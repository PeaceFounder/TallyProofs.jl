using CryptoGroups: Group, order, octet
using SigmaProofs: Proposition, Proof, Verifier, Simulator
using SigmaProofs.ElGamal: ElGamalRow
using ShuffleProofs: Shuffle, PoSProof
import SigmaProofs: prove, verify, proof_type

struct GeneratorSetup{G <: Group}
    h::G # blinding generator
    d::G # tracker generator
#    t::G # tracker generator
    o::G
end

Base.:(==)(x::T, y::T) where T <: GeneratorSetup = x.h == y.h && x.d == y.d && x.o == y.o

struct VoteCommitment{G <: Group}
    Q::G # tracker commitment
    R::G # vote commitment with tracker blinding generator
    V::G
end

function tracker_commitment(vote::VoteCommitment, e::BigInt)
    (; Q, R) = vote
    return Q^e * R
end

vote_commitment(vote::VoteCommitment) = vote.V

struct TrackerOppening
    # Q
    Œ±::BigInt # blinding factors for tracker
    Œª::BigInt

    # R
    Œ≤::BigInt # blinding factor for vote and tracker blinding factor
    Œ∏::BigInt # blinding factor for the generator
end

struct VoteOppening # order changed
    # Q
    Œ±::BigInt # blinding factors for tracker
    Œª::BigInt

    # R
    Œ≤::BigInt # blinding factor for vote and tracker blinding factor
    Œ∏::BigInt # blinding factor for the generator
    
    # V
    Œ≥::BigInt
    selection::BigInt #NTuple{N, BigInt}
end

# Why is Œ≤ a keyword paremeter here
function vote_oppening(selection::Integer, range::UnitRange{<:Integer}; roprg = gen_roprg(), Œ≤ = rand(roprg(:Œ≤), range)) 

    Œ± = rand(roprg(:Œ±), range)
    Œª = rand(roprg(:Œª), range)

    Œ∏ = rand(roprg(:Œ∏), range)

    Œ≥ = rand(roprg(:Œ≥), range)

    #return VoteOppening(Œ±, Œ∏, Œª, Œ≤, selection)
    return VoteOppening(Œ±, Œª, Œ≤, Œ∏, Œ≥, selection)
end

#function vote_commitment(oppening::VoteOppening, setup::GeneratorSetup{<:Group})

function VoteCommitment(oppening::VoteOppening, setup::GeneratorSetup{G}) where G <: Group

    (; h, d, o) = setup
    #(; Œ±, Œ≤, Œª, Œ∏, selection) = oppening
    (; Œ±, Œ≤, Œ≥, Œª, Œ∏, selection) = oppening

    #Q = h^Œ± * t^Œª
    Q = h^Œ± * d^Œª

    
    #R = h^Œ≤ * d^Œ∏
    R = iszero(Œ≤) ? d^Œ∏ : h^Œ≤ * d^Œ∏ # A temporary fix

    if iszero(Œ≥) 
        V = iszero(selection) ? one(G) : o^selection
    else
        V = iszero(selection) ? h^Œ≥ : h^Œ≥ * o^selection
    end

    return VoteCommitment(Q, R, V)
end

function isbinding(commitment::VoteCommitment{G}, oppening::VoteOppening, setup::GeneratorSetup{G}) where {G <: Group}
    return commitment == vote_commitment(oppening, setup)
end

struct VoteRecord
    #tracker::G
    tracker::BigInt
    selection::BigInt
end

# function commitment(record::VoteRecord, s::BigInt, setup::GeneratorSetup{G}) where {G <: Group}

#     (; tracker, selection) = record
#     (; h, d, o) = setup

#     C = iszero(selection) ? h^s * d^tracker : h^s * d^tracker * o^selection

#     return C
# end


# I will need tracker_commitment and vote_commitment

function tracker_commitment(record::VoteRecord, setup::GeneratorSetup{G}) where G <: Group

    (; tracker) = record
    (; d) = setup

    T = d^tracker

    return T
end


function vote_commitment(record::VoteRecord, setup::GeneratorSetup{G}) where {G <: Group} 

    (; tracker, selection) = record
    (; o) = setup

    V = iszero(selection) ? one(G) : o^selection

    return V
end


# function commitment(record::VoteRecord, setup::GeneratorSetup{G}) where {G <: Group} 

#     (; tracker, selection) = record
#     (; d, o) = setup

#     C = iszero(selection) ? d^tracker : d^tracker * o^selection

#     return C
# end



struct RevealShuffle{G <: Group} <: Proposition
    setup::GeneratorSetup{G}
    tracker_challenges::Vector{BigInt}
    vote_commitments::Vector{VoteCommitment{G}} 
    tally::Vector{VoteRecord} 
end

Base.length(proposition::RevealShuffle) = length(proposition.vote_commitments)

Base.permute!(proposition::RevealShuffle, œà::Vector{Int}) = permute!(proposition.tally, œà)

struct RevealShuffleProof{G <: Group} <: Proof
    shuffle::PoSProof{G, 2} # I will need to upgrade this to 2
    #s::Vector{BigInt}
    trackers::Vector{LambdaProof{G}}
end

proof_type(::Type{RevealShuffle{G}}) where {G <: Group} = RevealShuffleProof{G}

function tracker(Œ∏::Integer, Œª::Integer, chg::Integer, order::Integer)
    t = Œ∏ + Œª * chg
    return mod(t, order)
end

function tracker(vote_oppening::VoteOppening, chg::Integer, order::Integer) #, setup::GeneratorSetup)
    (; Œ∏, Œª) = vote_oppening
    return tracker(Œ∏, Œª, chg, order)
end

function reveal(setup::GeneratorSetup{G}, tracker_challenges::Vector{BigInt}, vote_commitments::Vector{VoteCommitment{G}}, vote_oppenings::Vector{<:VoteOppening}) where {G <: Group}
    
    #(; d, o) = setup

    #tally = VoteRecord{G}[VoteRecord(tracker(oppening, chg, setup), oppening.selection) for (chg, oppening) in zip(tracker_challenges, vote_oppenings)]
    tally = VoteRecord[VoteRecord(tracker(oppening, chg, order(setup.d)), oppening.selection) for (chg, oppening) in zip(tracker_challenges, vote_oppenings)]

    return RevealShuffle(setup, tracker_challenges, vote_commitments, tally)
end

function reveal(setup::GeneratorSetup{G}, tracker_challenges::Vector{BigInt}, vote_commitments::Vector{VoteCommitment{G}}, vote_oppenings::Vector{<:VoteOppening}, verifier::Verifier; roprg = gen_roprg()) where G <: Group

    proposition = reveal(setup, tracker_challenges, vote_commitments, vote_oppenings)
    
    ùõô = sortperm(proposition.tally, by = x -> x.tracker)
    permute!(proposition, ùõô)

    proof = prove(proposition, verifier, vote_oppenings, ùõô; roprg)

    return Simulator(proposition, proof, verifier)
end

function prove(proposition::RevealShuffle{G}, verifier::Verifier, vote_oppenings::AbstractVector{<:VoteOppening}, ùõô::Vector{<:Integer}; roprg = gen_roprg()) where G <: Group

    (; setup, tally, tracker_challenges, vote_commitments) = proposition
    (; h, d) = proposition.setup

    #ùê´‚Ä≤ = rand(roprg(:ùê´‚Ä≤), 2:order(G)-1, length(vote_commitments))

    # Œ± = (i.Œ± for i in vote_oppenings)
    # Œ≤ = (i.Œ≤ for i in vote_oppenings)

    #s = Œ± .* tracker_challenges .+ Œ≤ + ùê´‚Ä≤
    #permute!(s, ùõô)

    #ùê´‚Ä≤ = mod.( .- Œ≤ .- Œ± .* tracker_challenges, order(G))
    #ùê´T = .- Œ≤ .- Œ± .* tracker_challenges
    ùê´T = [- i.Œ≤ - i.Œ± * ei for (i, ei) in zip(vote_oppenings, tracker_challenges)]
    ùê´V = [-i.Œ≥ for i in vote_oppenings]
    
    #ùê´‚Ä≤ = [ùê´T ùê´V]
    ùê´‚Ä≤ = [ùê´T ùê´V] # 

    #C_vec = (commitment(com, chg) for (com, chg) in zip(vote_commitments, tracker_challenges))
    T_vec = (tracker_commitment(com, chg) for (com, chg) in zip(vote_commitments, tracker_challenges))
    V_vec = (vote_commitment(com) for com in vote_commitments)
    ùêû = [ElGamalRow((Ti, Vi), (Ti, Vi)) for (Ti, Vi) in zip(T_vec, V_vec)]

    #C‚Ä≤_vec = (commitment(votei, si, setup) for (votei, si) in zip(tally, s))
    #C‚Ä≤_vec = (commitment(votei, setup) for votei in tally)
    T‚Ä≤_vec = (tracker_commitment(votei, setup) for votei in tally)
    V‚Ä≤_vec = (vote_commitment(votei, setup) for votei in tally)
    ùêû‚Ä≤ = [ElGamalRow((Ti, Vi), (Ti, Vi)) for (Ti, Vi) in zip(T‚Ä≤_vec, V‚Ä≤_vec)]
    

    shuffle_proposition = Shuffle(h, h, ùêû, ùêû‚Ä≤)

    shuffle_proof = prove(shuffle_proposition, verifier, ùê´‚Ä≤, ùõô; roprg)

    #trackers = (i.tracker for i in tally)

    Q_vec = (i.Q for i in vote_commitments)

    #Œ∏ = (i.Œ∏ for i in @view(vote_oppenings[ùõô]))
    #Œª = (i.Œª for i in @view(vote_oppenings[ùõô]))

    Œ± = (i.Œ± for i in vote_oppenings)
    Œª = (i.Œª for i in vote_oppenings)

    lambda_proofs = [prove(LambdaCommitment(h, d, Qi), verifier, Œªi, Œ±i; roprg = gen_roprg(roprg("$Qi"))) for (Qi, Œªi, Œ±i) in zip(Q_vec, Œª, Œ±)]
    
    
    #return RevealShuffleProof(shuffle_proof, s, lambda_proofs)
    return RevealShuffleProof(shuffle_proof, lambda_proofs)
end


function verify(proposition::RevealShuffle{G}, proof::RevealShuffleProof{G}, verifier::Verifier) where G <: Group

    (; setup, tally, tracker_challenges, vote_commitments) = proposition
    (; h, d, o) = proposition.setup

    T_vec = (tracker_commitment(com, chg) for (com, chg) in zip(vote_commitments, tracker_challenges))
    V_vec = (vote_commitment(com) for com in vote_commitments)
    ùêû = [ElGamalRow((Ti, Vi), (Ti, Vi)) for (Ti, Vi) in zip(T_vec, V_vec)]
    #ùêû = [ElGamalRow(Ti, Ti) for Ti in T_vec]

    #C‚Ä≤_vec = (commitment(votei, si, setup) for (votei, si) in zip(tally, proof.s))
    T‚Ä≤_vec = (tracker_commitment(votei, setup) for votei in tally)
    V‚Ä≤_vec = (vote_commitment(votei, setup) for votei in tally)
    ùêû‚Ä≤ = [ElGamalRow((Ti, Vi), (Ti, Vi)) for (Ti, Vi) in zip(T‚Ä≤_vec, V‚Ä≤_vec)]

    #ùêû‚Ä≤ = [ElGamalRow(Ti, Ti) for Ti in T‚Ä≤_vec]

    shuffle_proposition = Shuffle(h, h, ùêû, ùêû‚Ä≤)

    verify(shuffle_proposition, proof.shuffle, verifier) || return false

    Q_vec = (i.Q for i in proposition.vote_commitments)

    for (Qi, pok) in zip(Q_vec, proof.trackers)

        verify(LambdaCommitment(h, d, Qi), pok, verifier) || return false

    end

    return true
end
